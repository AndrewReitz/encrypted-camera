// Code generated by dagger-compiler.  Do not edit.
package com.andrewreitz.encryptedcamera.encryption;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<FullEncryptionTest>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code FullEncryptionTest} and its
 * dependencies.
 *
 * Being a {@code Provider<FullEncryptionTest>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<FullEncryptionTest>} and handling injection
 * of annotated fields.
 */
public final class FullEncryptionTest$$InjectAdapter extends Binding<FullEncryptionTest>
    implements Provider<FullEncryptionTest>, MembersInjector<FullEncryptionTest> {
  private Binding<KeyManager> keyManager;
  private Binding<java.io.File> encrtypedDirectory;
  private Binding<com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager> externalStorageManager;
  private Binding<javax.crypto.Cipher> cipher;

  public FullEncryptionTest$$InjectAdapter() {
    super("com.andrewreitz.encryptedcamera.encryption.FullEncryptionTest", "members/com.andrewreitz.encryptedcamera.encryption.FullEncryptionTest", NOT_SINGLETON, FullEncryptionTest.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    keyManager = (Binding<KeyManager>) linker.requestBinding("com.andrewreitz.encryptedcamera.encryption.KeyManager", FullEncryptionTest.class, getClass().getClassLoader());
    encrtypedDirectory = (Binding<java.io.File>) linker.requestBinding("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.EncryptedDirectory()/java.io.File", FullEncryptionTest.class, getClass().getClassLoader());
    externalStorageManager = (Binding<com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager>) linker.requestBinding("com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager", FullEncryptionTest.class, getClass().getClassLoader());
    cipher = (Binding<javax.crypto.Cipher>) linker.requestBinding("javax.crypto.Cipher", FullEncryptionTest.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(keyManager);
    injectMembersBindings.add(encrtypedDirectory);
    injectMembersBindings.add(externalStorageManager);
    injectMembersBindings.add(cipher);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<FullEncryptionTest>}.
   */
  @Override
  public FullEncryptionTest get() {
    FullEncryptionTest result = new FullEncryptionTest();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<FullEncryptionTest>}.
   */
  @Override
  public void injectMembers(FullEncryptionTest object) {
    object.keyManager = keyManager.get();
    object.encrtypedDirectory = encrtypedDirectory.get();
    object.externalStorageManager = externalStorageManager.get();
    object.cipher = cipher.get();
  }

}
