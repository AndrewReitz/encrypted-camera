// Code generated by dagger-compiler.  Do not edit.
package com.andrewreitz.encryptedcamera.encryption;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<EncryptionProviderImplTest>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code EncryptionProviderImplTest} and its
 * dependencies.
 *
 * Being a {@code Provider<EncryptionProviderImplTest>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<EncryptionProviderImplTest>} and handling injection
 * of annotated fields.
 */
public final class EncryptionProviderImplTest$$InjectAdapter extends Binding<EncryptionProviderImplTest>
    implements Provider<EncryptionProviderImplTest>, MembersInjector<EncryptionProviderImplTest> {
  private Binding<javax.crypto.Cipher> cipher;
  private Binding<KeyManager> keyManager;

  public EncryptionProviderImplTest$$InjectAdapter() {
    super("com.andrewreitz.encryptedcamera.encryption.EncryptionProviderImplTest", "members/com.andrewreitz.encryptedcamera.encryption.EncryptionProviderImplTest", NOT_SINGLETON, EncryptionProviderImplTest.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    cipher = (Binding<javax.crypto.Cipher>) linker.requestBinding("javax.crypto.Cipher", EncryptionProviderImplTest.class, getClass().getClassLoader());
    keyManager = (Binding<KeyManager>) linker.requestBinding("com.andrewreitz.encryptedcamera.encryption.KeyManager", EncryptionProviderImplTest.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(cipher);
    injectMembersBindings.add(keyManager);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<EncryptionProviderImplTest>}.
   */
  @Override
  public EncryptionProviderImplTest get() {
    EncryptionProviderImplTest result = new EncryptionProviderImplTest();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<EncryptionProviderImplTest>}.
   */
  @Override
  public void injectMembers(EncryptionProviderImplTest object) {
    object.cipher = cipher.get();
    object.keyManager = keyManager.get();
  }

}
