// Code generated by dagger-compiler.  Do not edit.
package com.andrewreitz.encryptedcamera.dependencyinjection.module;

import dagger.internal.Binding;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class AndroidModule$$ModuleAdapter extends ModuleAdapter<AndroidModule> {
  private static final String[] INJECTS = { "members/com.andrewreitz.encryptedcamera.EncryptedCameraApp", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { com.andrewreitz.encryptedcamera.dependencyinjection.module.SharedPrefsModule.class, com.andrewreitz.encryptedcamera.dependencyinjection.module.EncryptionModule.class, com.andrewreitz.encryptedcamera.dependencyinjection.module.FileSystemModule.class, };

  public AndroidModule$$ModuleAdapter() {
    super(com.andrewreitz.encryptedcamera.dependencyinjection.module.AndroidModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map, AndroidModule module) {
    map.put("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.ForApplication()/android.content.Context", new ProvideApplicationContextProvidesAdapter(module));
    map.put("android.app.NotificationManager", new ProvideNotificationManagerProvidesAdapter(module));
    map.put("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.EncryptionErrorNotification()/android.app.Notification", new ProvideEncryptionErrorNotificationProvidesAdapter(module));
    map.put("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.UnlockNotification()/android.app.Notification", new ProvideUnlockNotificationProvidesAdapter(module));
    map.put("java.security.SecureRandom", new ProvideSecureRandomProvidesAdapter(module));
    map.put("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.MediaFormat()/java.text.DateFormat", new ProvideMediaDateFormatProvidesAdapter(module));
    map.put("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.CameraIntent()/android.content.Intent", new ProvideCameraIntentProvidesAdapter(module));
  }

  /**
   * A {@code Binding<android.content.Context>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.Context>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideApplicationContextProvidesAdapter extends Binding<android.content.Context>
      implements Provider<android.content.Context> {
    private final AndroidModule module;

    public ProvideApplicationContextProvidesAdapter(AndroidModule module) {
      super("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.ForApplication()/android.content.Context", null, IS_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.AndroidModule.provideApplicationContext()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.Context>}.
     */
    @Override
    public android.content.Context get() {
      return module.provideApplicationContext();
    }
  }

  /**
   * A {@code Binding<android.app.NotificationManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.app.NotificationManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideNotificationManagerProvidesAdapter extends Binding<android.app.NotificationManager>
      implements Provider<android.app.NotificationManager> {
    private final AndroidModule module;

    public ProvideNotificationManagerProvidesAdapter(AndroidModule module) {
      super("android.app.NotificationManager", null, IS_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.AndroidModule.provideNotificationManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.app.NotificationManager>}.
     */
    @Override
    public android.app.NotificationManager get() {
      return module.provideNotificationManager();
    }
  }

  /**
   * A {@code Binding<android.app.Notification>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.app.Notification>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideEncryptionErrorNotificationProvidesAdapter extends Binding<android.app.Notification>
      implements Provider<android.app.Notification> {
    private final AndroidModule module;

    public ProvideEncryptionErrorNotificationProvidesAdapter(AndroidModule module) {
      super("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.EncryptionErrorNotification()/android.app.Notification", null, IS_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.AndroidModule.provideEncryptionErrorNotification()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.app.Notification>}.
     */
    @Override
    public android.app.Notification get() {
      return module.provideEncryptionErrorNotification();
    }
  }

  /**
   * A {@code Binding<android.app.Notification>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.app.Notification>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideUnlockNotificationProvidesAdapter extends Binding<android.app.Notification>
      implements Provider<android.app.Notification> {
    private final AndroidModule module;

    public ProvideUnlockNotificationProvidesAdapter(AndroidModule module) {
      super("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.UnlockNotification()/android.app.Notification", null, IS_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.AndroidModule.provideUnlockNotification()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.app.Notification>}.
     */
    @Override
    public android.app.Notification get() {
      return module.provideUnlockNotification();
    }
  }

  /**
   * A {@code Binding<java.security.SecureRandom>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<java.security.SecureRandom>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSecureRandomProvidesAdapter extends Binding<java.security.SecureRandom>
      implements Provider<java.security.SecureRandom> {
    private final AndroidModule module;

    public ProvideSecureRandomProvidesAdapter(AndroidModule module) {
      super("java.security.SecureRandom", null, IS_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.AndroidModule.provideSecureRandom()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.security.SecureRandom>}.
     */
    @Override
    public java.security.SecureRandom get() {
      return module.provideSecureRandom();
    }
  }

  /**
   * A {@code Binding<java.text.DateFormat>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<java.text.DateFormat>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideMediaDateFormatProvidesAdapter extends Binding<java.text.DateFormat>
      implements Provider<java.text.DateFormat> {
    private final AndroidModule module;

    public ProvideMediaDateFormatProvidesAdapter(AndroidModule module) {
      super("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.MediaFormat()/java.text.DateFormat", null, IS_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.AndroidModule.provideMediaDateFormat()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.text.DateFormat>}.
     */
    @Override
    public java.text.DateFormat get() {
      return module.provideMediaDateFormat();
    }
  }

  /**
   * A {@code Binding<android.content.Intent>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.Intent>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideCameraIntentProvidesAdapter extends Binding<android.content.Intent>
      implements Provider<android.content.Intent> {
    private final AndroidModule module;

    public ProvideCameraIntentProvidesAdapter(AndroidModule module) {
      super("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.CameraIntent()/android.content.Intent", null, NOT_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.AndroidModule.provideCameraIntent()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.Intent>}.
     */
    @Override
    public android.content.Intent get() {
      return module.provideCameraIntent();
    }
  }
}
