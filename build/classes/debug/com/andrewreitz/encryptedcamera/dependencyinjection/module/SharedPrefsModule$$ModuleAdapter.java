// Code generated by dagger-compiler.  Do not edit.
package com.andrewreitz.encryptedcamera.dependencyinjection.module;

import dagger.internal.Binding;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class SharedPrefsModule$$ModuleAdapter extends ModuleAdapter<SharedPrefsModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public SharedPrefsModule$$ModuleAdapter() {
    super(com.andrewreitz.encryptedcamera.dependencyinjection.module.SharedPrefsModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public SharedPrefsModule newModule() {
    return new com.andrewreitz.encryptedcamera.dependencyinjection.module.SharedPrefsModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map, SharedPrefsModule module) {
    map.put("android.content.SharedPreferences", new ProvideSharedPreferenceProvidesAdapter(module));
    map.put("com.andrewreitz.encryptedcamera.sharedpreference.SharedPreferenceService", new ProvideSharedPreferenceServiceProvidesAdapter(module));
  }

  /**
   * A {@code Binding<android.content.SharedPreferences>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code android.content.SharedPreferences} and its
   * dependencies.
   *
   * Being a {@code Provider<android.content.SharedPreferences>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSharedPreferenceProvidesAdapter extends Binding<android.content.SharedPreferences>
      implements Provider<android.content.SharedPreferences> {
    private final SharedPrefsModule module;
    private Binding<android.content.Context> context;

    public ProvideSharedPreferenceProvidesAdapter(SharedPrefsModule module) {
      super("android.content.SharedPreferences", null, IS_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.SharedPrefsModule.provideSharedPreference()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<android.content.Context>) linker.requestBinding("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.ForApplication()/android.content.Context", SharedPrefsModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.SharedPreferences>}.
     */
    @Override
    public android.content.SharedPreferences get() {
      return module.provideSharedPreference(context.get());
    }
  }

  /**
   * A {@code Binding<com.andrewreitz.encryptedcamera.sharedpreference.SharedPreferenceService>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.andrewreitz.encryptedcamera.sharedpreference.SharedPreferenceService} and its
   * dependencies.
   *
   * Being a {@code Provider<com.andrewreitz.encryptedcamera.sharedpreference.SharedPreferenceService>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSharedPreferenceServiceProvidesAdapter extends Binding<com.andrewreitz.encryptedcamera.sharedpreference.SharedPreferenceService>
      implements Provider<com.andrewreitz.encryptedcamera.sharedpreference.SharedPreferenceService> {
    private final SharedPrefsModule module;
    private Binding<android.content.SharedPreferences> sharedPreferences;

    public ProvideSharedPreferenceServiceProvidesAdapter(SharedPrefsModule module) {
      super("com.andrewreitz.encryptedcamera.sharedpreference.SharedPreferenceService", null, IS_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.SharedPrefsModule.provideSharedPreferenceService()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      sharedPreferences = (Binding<android.content.SharedPreferences>) linker.requestBinding("android.content.SharedPreferences", SharedPrefsModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(sharedPreferences);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.andrewreitz.encryptedcamera.sharedpreference.SharedPreferenceService>}.
     */
    @Override
    public com.andrewreitz.encryptedcamera.sharedpreference.SharedPreferenceService get() {
      return module.provideSharedPreferenceService(sharedPreferences.get());
    }
  }
}
