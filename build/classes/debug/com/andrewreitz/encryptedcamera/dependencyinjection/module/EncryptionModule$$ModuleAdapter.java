// Code generated by dagger-compiler.  Do not edit.
package com.andrewreitz.encryptedcamera.dependencyinjection.module;

import dagger.internal.Binding;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class EncryptionModule$$ModuleAdapter extends ModuleAdapter<EncryptionModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public EncryptionModule$$ModuleAdapter() {
    super(com.andrewreitz.encryptedcamera.dependencyinjection.module.EncryptionModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public EncryptionModule newModule() {
    return new com.andrewreitz.encryptedcamera.dependencyinjection.module.EncryptionModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map, EncryptionModule module) {
    map.put("com.andrewreitz.encryptedcamera.encryption.KeyManager", new ProvideKeyManagerProvidesAdapter(module));
    map.put("javax.crypto.Cipher", new ProvideCipherProvidesAdapter(module));
    map.put("com.andrewreitz.encryptedcamera.encryption.EncryptionProvider", new ProvideEncryptionProviderProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.andrewreitz.encryptedcamera.encryption.KeyManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.andrewreitz.encryptedcamera.encryption.KeyManager} and its
   * dependencies.
   *
   * Being a {@code Provider<com.andrewreitz.encryptedcamera.encryption.KeyManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideKeyManagerProvidesAdapter extends Binding<com.andrewreitz.encryptedcamera.encryption.KeyManager>
      implements Provider<com.andrewreitz.encryptedcamera.encryption.KeyManager> {
    private final EncryptionModule module;
    private Binding<android.content.Context> context;

    public ProvideKeyManagerProvidesAdapter(EncryptionModule module) {
      super("com.andrewreitz.encryptedcamera.encryption.KeyManager", null, IS_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.EncryptionModule.provideKeyManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<android.content.Context>) linker.requestBinding("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.ForApplication()/android.content.Context", EncryptionModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.andrewreitz.encryptedcamera.encryption.KeyManager>}.
     */
    @Override
    public com.andrewreitz.encryptedcamera.encryption.KeyManager get() {
      return module.provideKeyManager(context.get());
    }
  }

  /**
   * A {@code Binding<javax.crypto.Cipher>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<javax.crypto.Cipher>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideCipherProvidesAdapter extends Binding<javax.crypto.Cipher>
      implements Provider<javax.crypto.Cipher> {
    private final EncryptionModule module;

    public ProvideCipherProvidesAdapter(EncryptionModule module) {
      super("javax.crypto.Cipher", null, NOT_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.EncryptionModule.provideCipher()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<javax.crypto.Cipher>}.
     */
    @Override
    public javax.crypto.Cipher get() {
      return module.provideCipher();
    }
  }

  /**
   * A {@code Binding<com.andrewreitz.encryptedcamera.encryption.EncryptionProvider>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.andrewreitz.encryptedcamera.encryption.EncryptionProvider} and its
   * dependencies.
   *
   * Being a {@code Provider<com.andrewreitz.encryptedcamera.encryption.EncryptionProvider>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideEncryptionProviderProvidesAdapter extends Binding<com.andrewreitz.encryptedcamera.encryption.EncryptionProvider>
      implements Provider<com.andrewreitz.encryptedcamera.encryption.EncryptionProvider> {
    private final EncryptionModule module;
    private Binding<javax.crypto.Cipher> cipher;
    private Binding<com.andrewreitz.encryptedcamera.encryption.KeyManager> keyManager;

    public ProvideEncryptionProviderProvidesAdapter(EncryptionModule module) {
      super("com.andrewreitz.encryptedcamera.encryption.EncryptionProvider", null, IS_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.EncryptionModule.provideEncryptionProvider()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      cipher = (Binding<javax.crypto.Cipher>) linker.requestBinding("javax.crypto.Cipher", EncryptionModule.class, getClass().getClassLoader());
      keyManager = (Binding<com.andrewreitz.encryptedcamera.encryption.KeyManager>) linker.requestBinding("com.andrewreitz.encryptedcamera.encryption.KeyManager", EncryptionModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(cipher);
      getBindings.add(keyManager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.andrewreitz.encryptedcamera.encryption.EncryptionProvider>}.
     */
    @Override
    public com.andrewreitz.encryptedcamera.encryption.EncryptionProvider get() {
      return module.provideEncryptionProvider(cipher.get(), keyManager.get());
    }
  }
}
