// Code generated by dagger-compiler.  Do not edit.
package com.andrewreitz.encryptedcamera.dependencyinjection.module;

import dagger.internal.Binding;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class FileSystemModule$$ModuleAdapter extends ModuleAdapter<FileSystemModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public FileSystemModule$$ModuleAdapter() {
    super(com.andrewreitz.encryptedcamera.dependencyinjection.module.FileSystemModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public FileSystemModule newModule() {
    return new com.andrewreitz.encryptedcamera.dependencyinjection.module.FileSystemModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map, FileSystemModule module) {
    map.put("com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager", new ProvideExternalStorageManagerProvidesAdapter(module));
    map.put("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.EncryptedDirectory()/java.io.File", new ProvideEncryptedFileDirectoryProvidesAdapter(module));
    map.put("com.andrewreitz.encryptedcamera.filesystem.SecureDelete", new ProvideSecureDeleteProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager} and its
   * dependencies.
   *
   * Being a {@code Provider<com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideExternalStorageManagerProvidesAdapter extends Binding<com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager>
      implements Provider<com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager> {
    private final FileSystemModule module;
    private Binding<android.content.Context> context;
    private Binding<java.text.DateFormat> dateFormat;

    public ProvideExternalStorageManagerProvidesAdapter(FileSystemModule module) {
      super("com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager", null, IS_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.FileSystemModule.provideExternalStorageManager()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<android.content.Context>) linker.requestBinding("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.ForApplication()/android.content.Context", FileSystemModule.class, getClass().getClassLoader());
      dateFormat = (Binding<java.text.DateFormat>) linker.requestBinding("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.MediaFormat()/java.text.DateFormat", FileSystemModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
      getBindings.add(dateFormat);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager>}.
     */
    @Override
    public com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager get() {
      return module.provideExternalStorageManager(context.get(), dateFormat.get());
    }
  }

  /**
   * A {@code Binding<java.io.File>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code java.io.File} and its
   * dependencies.
   *
   * Being a {@code Provider<java.io.File>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideEncryptedFileDirectoryProvidesAdapter extends Binding<java.io.File>
      implements Provider<java.io.File> {
    private final FileSystemModule module;
    private Binding<android.content.Context> context;

    public ProvideEncryptedFileDirectoryProvidesAdapter(FileSystemModule module) {
      super("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.EncryptedDirectory()/java.io.File", null, IS_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.FileSystemModule.provideEncryptedFileDirectory()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<android.content.Context>) linker.requestBinding("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.ForApplication()/android.content.Context", FileSystemModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.io.File>}.
     */
    @Override
    public java.io.File get() {
      return module.provideEncryptedFileDirectory(context.get());
    }
  }

  /**
   * A {@code Binding<com.andrewreitz.encryptedcamera.filesystem.SecureDelete>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.andrewreitz.encryptedcamera.filesystem.SecureDelete} and its
   * dependencies.
   *
   * Being a {@code Provider<com.andrewreitz.encryptedcamera.filesystem.SecureDelete>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSecureDeleteProvidesAdapter extends Binding<com.andrewreitz.encryptedcamera.filesystem.SecureDelete>
      implements Provider<com.andrewreitz.encryptedcamera.filesystem.SecureDelete> {
    private final FileSystemModule module;
    private Binding<java.security.SecureRandom> secureRandom;

    public ProvideSecureDeleteProvidesAdapter(FileSystemModule module) {
      super("com.andrewreitz.encryptedcamera.filesystem.SecureDelete", null, IS_SINGLETON, "com.andrewreitz.encryptedcamera.dependencyinjection.module.FileSystemModule.provideSecureDelete()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      secureRandom = (Binding<java.security.SecureRandom>) linker.requestBinding("java.security.SecureRandom", FileSystemModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(secureRandom);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.andrewreitz.encryptedcamera.filesystem.SecureDelete>}.
     */
    @Override
    public com.andrewreitz.encryptedcamera.filesystem.SecureDelete get() {
      return module.provideSecureDelete(secureRandom.get());
    }
  }
}
