// Code generated by dagger-compiler.  Do not edit.
package com.andrewreitz.encryptedcamera.fragment;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<SettingsHomeFragment>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code SettingsHomeFragment} and its
 * dependencies.
 *
 * Being a {@code Provider<SettingsHomeFragment>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<SettingsHomeFragment>} and handling injection
 * of annotated fields.
 */
public final class SettingsHomeFragment$$InjectAdapter extends Binding<SettingsHomeFragment>
    implements Provider<SettingsHomeFragment>, MembersInjector<SettingsHomeFragment> {
  private Binding<android.app.NotificationManager> notificationManager;
  private Binding<com.andrewreitz.encryptedcamera.encryption.KeyManager> keyManager;
  private Binding<com.andrewreitz.encryptedcamera.sharedpreference.EncryptedCameraPreferenceManager> preferenceManager;
  private Binding<android.app.Notification> unlockNotification;
  private Binding<java.io.File> encryptedDirectory;
  private Binding<com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager> externalStorageManager;
  private Binding<com.andrewreitz.encryptedcamera.encryption.EncryptionProvider> encryptionProvider;
  private Binding<com.andrewreitz.encryptedcamera.filesystem.SecureDelete> secureDelete;
  private Binding<android.app.FragmentManager> fragmentManager;

  public SettingsHomeFragment$$InjectAdapter() {
    super("com.andrewreitz.encryptedcamera.fragment.SettingsHomeFragment", "members/com.andrewreitz.encryptedcamera.fragment.SettingsHomeFragment", NOT_SINGLETON, SettingsHomeFragment.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    notificationManager = (Binding<android.app.NotificationManager>) linker.requestBinding("android.app.NotificationManager", SettingsHomeFragment.class, getClass().getClassLoader());
    keyManager = (Binding<com.andrewreitz.encryptedcamera.encryption.KeyManager>) linker.requestBinding("com.andrewreitz.encryptedcamera.encryption.KeyManager", SettingsHomeFragment.class, getClass().getClassLoader());
    preferenceManager = (Binding<com.andrewreitz.encryptedcamera.sharedpreference.EncryptedCameraPreferenceManager>) linker.requestBinding("com.andrewreitz.encryptedcamera.sharedpreference.EncryptedCameraPreferenceManager", SettingsHomeFragment.class, getClass().getClassLoader());
    unlockNotification = (Binding<android.app.Notification>) linker.requestBinding("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.UnlockNotification()/android.app.Notification", SettingsHomeFragment.class, getClass().getClassLoader());
    encryptedDirectory = (Binding<java.io.File>) linker.requestBinding("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.EncryptedDirectory()/java.io.File", SettingsHomeFragment.class, getClass().getClassLoader());
    externalStorageManager = (Binding<com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager>) linker.requestBinding("com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager", SettingsHomeFragment.class, getClass().getClassLoader());
    encryptionProvider = (Binding<com.andrewreitz.encryptedcamera.encryption.EncryptionProvider>) linker.requestBinding("com.andrewreitz.encryptedcamera.encryption.EncryptionProvider", SettingsHomeFragment.class, getClass().getClassLoader());
    secureDelete = (Binding<com.andrewreitz.encryptedcamera.filesystem.SecureDelete>) linker.requestBinding("com.andrewreitz.encryptedcamera.filesystem.SecureDelete", SettingsHomeFragment.class, getClass().getClassLoader());
    fragmentManager = (Binding<android.app.FragmentManager>) linker.requestBinding("android.app.FragmentManager", SettingsHomeFragment.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(notificationManager);
    injectMembersBindings.add(keyManager);
    injectMembersBindings.add(preferenceManager);
    injectMembersBindings.add(unlockNotification);
    injectMembersBindings.add(encryptedDirectory);
    injectMembersBindings.add(externalStorageManager);
    injectMembersBindings.add(encryptionProvider);
    injectMembersBindings.add(secureDelete);
    injectMembersBindings.add(fragmentManager);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<SettingsHomeFragment>}.
   */
  @Override
  public SettingsHomeFragment get() {
    SettingsHomeFragment result = new SettingsHomeFragment();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<SettingsHomeFragment>}.
   */
  @Override
  public void injectMembers(SettingsHomeFragment object) {
    object.notificationManager = notificationManager.get();
    object.keyManager = keyManager.get();
    object.preferenceManager = preferenceManager.get();
    object.unlockNotification = unlockNotification.get();
    object.encryptedDirectory = encryptedDirectory.get();
    object.externalStorageManager = externalStorageManager.get();
    object.encryptionProvider = encryptionProvider.get();
    object.secureDelete = secureDelete.get();
    object.fragmentManager = fragmentManager.get();
  }

}
