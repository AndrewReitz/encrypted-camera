// Code generated by dagger-compiler.  Do not edit.
package com.andrewreitz.encryptedcamera.activity;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<CameraActivity>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code CameraActivity} and its
 * dependencies.
 *
 * Being a {@code Provider<CameraActivity>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<CameraActivity>} and handling injection
 * of annotated fields.
 */
public final class CameraActivity$$InjectAdapter extends Binding<CameraActivity>
    implements Provider<CameraActivity>, MembersInjector<CameraActivity> {
  private Binding<android.content.Intent> cameraIntent;
  private Binding<com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager> externalStorageManager;
  private Binding<com.andrewreitz.encryptedcamera.encryption.EncryptionProvider> encryptionProvider;
  private Binding<java.io.File> encryptedFileDirectory;
  private Binding<com.andrewreitz.encryptedcamera.filesystem.SecureDelete> secureDelete;
  private Binding<BaseActivity> supertype;

  public CameraActivity$$InjectAdapter() {
    super("com.andrewreitz.encryptedcamera.activity.CameraActivity", "members/com.andrewreitz.encryptedcamera.activity.CameraActivity", NOT_SINGLETON, CameraActivity.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    cameraIntent = (Binding<android.content.Intent>) linker.requestBinding("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.CameraIntent()/android.content.Intent", CameraActivity.class, getClass().getClassLoader());
    externalStorageManager = (Binding<com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager>) linker.requestBinding("com.andrewreitz.encryptedcamera.externalstoreage.ExternalStorageManager", CameraActivity.class, getClass().getClassLoader());
    encryptionProvider = (Binding<com.andrewreitz.encryptedcamera.encryption.EncryptionProvider>) linker.requestBinding("com.andrewreitz.encryptedcamera.encryption.EncryptionProvider", CameraActivity.class, getClass().getClassLoader());
    encryptedFileDirectory = (Binding<java.io.File>) linker.requestBinding("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.EncryptedDirectory()/java.io.File", CameraActivity.class, getClass().getClassLoader());
    secureDelete = (Binding<com.andrewreitz.encryptedcamera.filesystem.SecureDelete>) linker.requestBinding("com.andrewreitz.encryptedcamera.filesystem.SecureDelete", CameraActivity.class, getClass().getClassLoader());
    supertype = (Binding<BaseActivity>) linker.requestBinding("members/com.andrewreitz.encryptedcamera.activity.BaseActivity", CameraActivity.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(cameraIntent);
    injectMembersBindings.add(externalStorageManager);
    injectMembersBindings.add(encryptionProvider);
    injectMembersBindings.add(encryptedFileDirectory);
    injectMembersBindings.add(secureDelete);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<CameraActivity>}.
   */
  @Override
  public CameraActivity get() {
    CameraActivity result = new CameraActivity();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<CameraActivity>}.
   */
  @Override
  public void injectMembers(CameraActivity object) {
    object.cameraIntent = cameraIntent.get();
    object.externalStorageManager = externalStorageManager.get();
    object.encryptionProvider = encryptionProvider.get();
    object.encryptedFileDirectory = encryptedFileDirectory.get();
    object.secureDelete = secureDelete.get();
    supertype.injectMembers(object);
  }

}
