// Code generated by dagger-compiler.  Do not edit.
package com.andrewreitz.encryptedcamera.service;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<EncryptionIntentService>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code EncryptionIntentService} and its
 * dependencies.
 *
 * Being a {@code Provider<EncryptionIntentService>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<EncryptionIntentService>} and handling injection
 * of annotated fields.
 */
public final class EncryptionIntentService$$InjectAdapter extends Binding<EncryptionIntentService>
    implements Provider<EncryptionIntentService>, MembersInjector<EncryptionIntentService> {
  private Binding<com.andrewreitz.encryptedcamera.encryption.EncryptionProvider> encryptionProvider;
  private Binding<java.io.File> encryptedFileDirectory;
  private Binding<com.andrewreitz.encryptedcamera.filesystem.SecureDelete> secureDelete;
  private Binding<android.app.NotificationManager> notificationManager;
  private Binding<android.app.Notification> errorNotification;

  public EncryptionIntentService$$InjectAdapter() {
    super("com.andrewreitz.encryptedcamera.service.EncryptionIntentService", "members/com.andrewreitz.encryptedcamera.service.EncryptionIntentService", NOT_SINGLETON, EncryptionIntentService.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    encryptionProvider = (Binding<com.andrewreitz.encryptedcamera.encryption.EncryptionProvider>) linker.requestBinding("com.andrewreitz.encryptedcamera.encryption.EncryptionProvider", EncryptionIntentService.class, getClass().getClassLoader());
    encryptedFileDirectory = (Binding<java.io.File>) linker.requestBinding("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.EncryptedDirectory()/java.io.File", EncryptionIntentService.class, getClass().getClassLoader());
    secureDelete = (Binding<com.andrewreitz.encryptedcamera.filesystem.SecureDelete>) linker.requestBinding("com.andrewreitz.encryptedcamera.filesystem.SecureDelete", EncryptionIntentService.class, getClass().getClassLoader());
    notificationManager = (Binding<android.app.NotificationManager>) linker.requestBinding("android.app.NotificationManager", EncryptionIntentService.class, getClass().getClassLoader());
    errorNotification = (Binding<android.app.Notification>) linker.requestBinding("@com.andrewreitz.encryptedcamera.dependencyinjection.annotation.EncryptionErrorNotification()/android.app.Notification", EncryptionIntentService.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(encryptionProvider);
    injectMembersBindings.add(encryptedFileDirectory);
    injectMembersBindings.add(secureDelete);
    injectMembersBindings.add(notificationManager);
    injectMembersBindings.add(errorNotification);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<EncryptionIntentService>}.
   */
  @Override
  public EncryptionIntentService get() {
    EncryptionIntentService result = new EncryptionIntentService();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<EncryptionIntentService>}.
   */
  @Override
  public void injectMembers(EncryptionIntentService object) {
    object.encryptionProvider = encryptionProvider.get();
    object.encryptedFileDirectory = encryptedFileDirectory.get();
    object.secureDelete = secureDelete.get();
    object.notificationManager = notificationManager.get();
    object.errorNotification = errorNotification.get();
  }

}
