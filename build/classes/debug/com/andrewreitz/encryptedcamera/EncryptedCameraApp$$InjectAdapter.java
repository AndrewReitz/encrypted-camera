// Code generated by dagger-compiler.  Do not edit.
package com.andrewreitz.encryptedcamera;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<EncryptedCameraApp>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code EncryptedCameraApp} and its
 * dependencies.
 *
 * Being a {@code Provider<EncryptedCameraApp>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<EncryptedCameraApp>} and handling injection
 * of annotated fields.
 */
public final class EncryptedCameraApp$$InjectAdapter extends Binding<EncryptedCameraApp>
    implements Provider<EncryptedCameraApp>, MembersInjector<EncryptedCameraApp> {
  private Binding<com.andrewreitz.encryptedcamera.sharedpreference.EncryptedCameraPreferenceManager> preferenceManager;
  private Binding<com.andrewreitz.encryptedcamera.encryption.KeyManager> keyManager;

  public EncryptedCameraApp$$InjectAdapter() {
    super("com.andrewreitz.encryptedcamera.EncryptedCameraApp", "members/com.andrewreitz.encryptedcamera.EncryptedCameraApp", NOT_SINGLETON, EncryptedCameraApp.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    preferenceManager = (Binding<com.andrewreitz.encryptedcamera.sharedpreference.EncryptedCameraPreferenceManager>) linker.requestBinding("com.andrewreitz.encryptedcamera.sharedpreference.EncryptedCameraPreferenceManager", EncryptedCameraApp.class, getClass().getClassLoader());
    keyManager = (Binding<com.andrewreitz.encryptedcamera.encryption.KeyManager>) linker.requestBinding("com.andrewreitz.encryptedcamera.encryption.KeyManager", EncryptedCameraApp.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(preferenceManager);
    injectMembersBindings.add(keyManager);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<EncryptedCameraApp>}.
   */
  @Override
  public EncryptedCameraApp get() {
    EncryptedCameraApp result = new EncryptedCameraApp();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<EncryptedCameraApp>}.
   */
  @Override
  public void injectMembers(EncryptedCameraApp object) {
    object.preferenceManager = preferenceManager.get();
    object.keyManager = keyManager.get();
  }

}
